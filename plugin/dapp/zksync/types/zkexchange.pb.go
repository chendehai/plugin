// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: zkexchange.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpotTradeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 交易对
	LeftAssetTokenID uint32 `protobuf:"varint,1,opt,name=leftAssetTokenID,proto3" json:"leftAssetTokenID,omitempty"`
	// 交易对
	RightAssetTokenID uint32 `protobuf:"varint,2,opt,name=rightAssetTokenID,proto3" json:"rightAssetTokenID,omitempty"`
	// 价格
	Price int64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	// 总量
	Amount int64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// 操作， 1为买，2为卖
	Op int32 `protobuf:"varint,5,opt,name=op,proto3" json:"op,omitempty"`
	// L2交易发起账户ID
	FromAccountID uint64 `protobuf:"varint,6,opt,name=fromAccountID,proto3" json:"fromAccountID,omitempty"`
}

func (x *SpotTradeInfo) Reset() {
	*x = SpotTradeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkexchange_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotTradeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotTradeInfo) ProtoMessage() {}

func (x *SpotTradeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_zkexchange_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotTradeInfo.ProtoReflect.Descriptor instead.
func (*SpotTradeInfo) Descriptor() ([]byte, []int) {
	return file_zkexchange_proto_rawDescGZIP(), []int{0}
}

func (x *SpotTradeInfo) GetLeftAssetTokenID() uint32 {
	if x != nil {
		return x.LeftAssetTokenID
	}
	return 0
}

func (x *SpotTradeInfo) GetRightAssetTokenID() uint32 {
	if x != nil {
		return x.RightAssetTokenID
	}
	return 0
}

func (x *SpotTradeInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SpotTradeInfo) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SpotTradeInfo) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *SpotTradeInfo) GetFromAccountID() uint64 {
	if x != nil {
		return x.FromAccountID
	}
	return 0
}

// 订单信息
type SpotTradeOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderID int64 `protobuf:"varint,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	// Types that are assignable to Value:
	//
	//	*SpotTradeOrder_SpotTradeInfo
	Value isSpotTradeOrder_Value `protobuf_oneof:"value"`
	// 挂单类型
	Ty int32 `protobuf:"varint,4,opt,name=ty,proto3" json:"ty,omitempty"`
	// 已经成交的数量
	Executed int64 `protobuf:"varint,5,opt,name=executed,proto3" json:"executed,omitempty"`
	// 成交均价
	AVGPrice int64 `protobuf:"varint,6,opt,name=AVG_price,json=AVGPrice,proto3" json:"AVG_price,omitempty"`
	// 余额
	Balance int64 `protobuf:"varint,7,opt,name=balance,proto3" json:"balance,omitempty"`
	// 状态,0 挂单中ordered， 1 完成completed， 2撤回 revoked
	Status int32 `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	// 用户ID
	AccountID uint64 `protobuf:"varint,9,opt,name=accountID,proto3" json:"accountID,omitempty"`
	// 更新时间
	UpdateTime int64 `protobuf:"varint,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	// 索引
	Index int64 `protobuf:"varint,11,opt,name=index,proto3" json:"index,omitempty"`
	// 手续费率 (挂单)
	Rate int64 `protobuf:"varint,12,opt,name=rate,proto3" json:"rate,omitempty"`
	// 手续费
	DigestedFee int64 `protobuf:"varint,13,opt,name=digestedFee,proto3" json:"digestedFee,omitempty"`
	// 挂单hash
	Hash string `protobuf:"bytes,15,opt,name=hash,proto3" json:"hash,omitempty"`
	// 撤单hash
	RevokeHash string `protobuf:"bytes,16,opt,name=revokeHash,proto3" json:"revokeHash,omitempty"`
	// 创建时间
	CreateTime int64 `protobuf:"varint,17,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *SpotTradeOrder) Reset() {
	*x = SpotTradeOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkexchange_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotTradeOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotTradeOrder) ProtoMessage() {}

func (x *SpotTradeOrder) ProtoReflect() protoreflect.Message {
	mi := &file_zkexchange_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotTradeOrder.ProtoReflect.Descriptor instead.
func (*SpotTradeOrder) Descriptor() ([]byte, []int) {
	return file_zkexchange_proto_rawDescGZIP(), []int{1}
}

func (x *SpotTradeOrder) GetOrderID() int64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (m *SpotTradeOrder) GetValue() isSpotTradeOrder_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SpotTradeOrder) GetSpotTradeInfo() *SpotTradeInfo {
	if x, ok := x.GetValue().(*SpotTradeOrder_SpotTradeInfo); ok {
		return x.SpotTradeInfo
	}
	return nil
}

func (x *SpotTradeOrder) GetTy() int32 {
	if x != nil {
		return x.Ty
	}
	return 0
}

func (x *SpotTradeOrder) GetExecuted() int64 {
	if x != nil {
		return x.Executed
	}
	return 0
}

func (x *SpotTradeOrder) GetAVGPrice() int64 {
	if x != nil {
		return x.AVGPrice
	}
	return 0
}

func (x *SpotTradeOrder) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *SpotTradeOrder) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SpotTradeOrder) GetAccountID() uint64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *SpotTradeOrder) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *SpotTradeOrder) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SpotTradeOrder) GetRate() int64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *SpotTradeOrder) GetDigestedFee() int64 {
	if x != nil {
		return x.DigestedFee
	}
	return 0
}

func (x *SpotTradeOrder) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *SpotTradeOrder) GetRevokeHash() string {
	if x != nil {
		return x.RevokeHash
	}
	return ""
}

func (x *SpotTradeOrder) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type isSpotTradeOrder_Value interface {
	isSpotTradeOrder_Value()
}

type SpotTradeOrder_SpotTradeInfo struct {
	SpotTradeInfo *SpotTradeInfo `protobuf:"bytes,2,opt,name=spotTradeInfo,proto3,oneof"`
}

func (*SpotTradeOrder_SpotTradeInfo) isSpotTradeOrder_Value() {}

// 查询接口
type SpotQueryMarketDepth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 资产1
	LeftAssetTokenID uint32 `protobuf:"varint,1,opt,name=leftAssetTokenID,proto3" json:"leftAssetTokenID,omitempty"`
	// 资产2
	RightAssetTokenID uint32 `protobuf:"varint,2,opt,name=rightAssetTokenID,proto3" json:"rightAssetTokenID,omitempty"`
	// 操作， 1为买，2为卖
	Op int32 `protobuf:"varint,3,opt,name=op,proto3" json:"op,omitempty"`
	// 这里用价格作为索引值
	PrimaryKey string `protobuf:"bytes,4,opt,name=primaryKey,proto3" json:"primaryKey,omitempty"`
	// 单页返回多少条记录，默认返回10条,为了系统安全最多单次只能返回20条
	Count int32 `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	// 档位、精度
	Depth int32 `protobuf:"varint,6,opt,name=depth,proto3" json:"depth,omitempty"`
}

func (x *SpotQueryMarketDepth) Reset() {
	*x = SpotQueryMarketDepth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkexchange_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotQueryMarketDepth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotQueryMarketDepth) ProtoMessage() {}

func (x *SpotQueryMarketDepth) ProtoReflect() protoreflect.Message {
	mi := &file_zkexchange_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotQueryMarketDepth.ProtoReflect.Descriptor instead.
func (*SpotQueryMarketDepth) Descriptor() ([]byte, []int) {
	return file_zkexchange_proto_rawDescGZIP(), []int{2}
}

func (x *SpotQueryMarketDepth) GetLeftAssetTokenID() uint32 {
	if x != nil {
		return x.LeftAssetTokenID
	}
	return 0
}

func (x *SpotQueryMarketDepth) GetRightAssetTokenID() uint32 {
	if x != nil {
		return x.RightAssetTokenID
	}
	return 0
}

func (x *SpotQueryMarketDepth) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *SpotQueryMarketDepth) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

func (x *SpotQueryMarketDepth) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SpotQueryMarketDepth) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

// 市场深度
type SpotTradeMarketDepth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 资产1
	LeftAssetTokenID uint32 `protobuf:"varint,1,opt,name=leftAssetTokenID,proto3" json:"leftAssetTokenID,omitempty"`
	// 资产2
	RightAssetTokenID uint32 `protobuf:"varint,2,opt,name=rightAssetTokenID,proto3" json:"rightAssetTokenID,omitempty"`
	// 价格
	Price int64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	// 总量
	Amount int64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// 操作， 1为买，2为卖
	Op int32 `protobuf:"varint,5,opt,name=op,proto3" json:"op,omitempty"`
}

func (x *SpotTradeMarketDepth) Reset() {
	*x = SpotTradeMarketDepth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkexchange_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotTradeMarketDepth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotTradeMarketDepth) ProtoMessage() {}

func (x *SpotTradeMarketDepth) ProtoReflect() protoreflect.Message {
	mi := &file_zkexchange_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotTradeMarketDepth.ProtoReflect.Descriptor instead.
func (*SpotTradeMarketDepth) Descriptor() ([]byte, []int) {
	return file_zkexchange_proto_rawDescGZIP(), []int{3}
}

func (x *SpotTradeMarketDepth) GetLeftAssetTokenID() uint32 {
	if x != nil {
		return x.LeftAssetTokenID
	}
	return 0
}

func (x *SpotTradeMarketDepth) GetRightAssetTokenID() uint32 {
	if x != nil {
		return x.RightAssetTokenID
	}
	return 0
}

func (x *SpotTradeMarketDepth) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SpotTradeMarketDepth) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SpotTradeMarketDepth) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

// 查询接口返回的市场深度列表
type SpotTradeMarketDepthList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*SpotTradeMarketDepth `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	PrimaryKey string                  `protobuf:"bytes,2,opt,name=primaryKey,proto3" json:"primaryKey,omitempty"`
}

func (x *SpotTradeMarketDepthList) Reset() {
	*x = SpotTradeMarketDepthList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkexchange_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotTradeMarketDepthList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotTradeMarketDepthList) ProtoMessage() {}

func (x *SpotTradeMarketDepthList) ProtoReflect() protoreflect.Message {
	mi := &file_zkexchange_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotTradeMarketDepthList.ProtoReflect.Descriptor instead.
func (*SpotTradeMarketDepthList) Descriptor() ([]byte, []int) {
	return file_zkexchange_proto_rawDescGZIP(), []int{4}
}

func (x *SpotTradeMarketDepthList) GetList() []*SpotTradeMarketDepth {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *SpotTradeMarketDepthList) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

// 查询接口返回的市场买卖深度
type SpotTradeMarketAllDepth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 买
	Bids []*SpotTradeMarketDepth `protobuf:"bytes,1,rep,name=bids,proto3" json:"bids,omitempty"`
	// 卖
	Asks []*SpotTradeMarketDepth `protobuf:"bytes,2,rep,name=asks,proto3" json:"asks,omitempty"`
}

func (x *SpotTradeMarketAllDepth) Reset() {
	*x = SpotTradeMarketAllDepth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkexchange_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotTradeMarketAllDepth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotTradeMarketAllDepth) ProtoMessage() {}

func (x *SpotTradeMarketAllDepth) ProtoReflect() protoreflect.Message {
	mi := &file_zkexchange_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotTradeMarketAllDepth.ProtoReflect.Descriptor instead.
func (*SpotTradeMarketAllDepth) Descriptor() ([]byte, []int) {
	return file_zkexchange_proto_rawDescGZIP(), []int{5}
}

func (x *SpotTradeMarketAllDepth) GetBids() []*SpotTradeMarketDepth {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *SpotTradeMarketAllDepth) GetAsks() []*SpotTradeMarketDepth {
	if x != nil {
		return x.Asks
	}
	return nil
}

// 查询最新得成交信息,外部接口
type SpotTradeQueryHistoryOrderList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 资产1
	LeftAssetTokenID uint32 `protobuf:"varint,1,opt,name=leftAssetTokenID,proto3" json:"leftAssetTokenID,omitempty"`
	// 资产2
	RightAssetTokenID uint32 `protobuf:"varint,2,opt,name=rightAssetTokenID,proto3" json:"rightAssetTokenID,omitempty"`
	// 索引值
	PrimaryKey string `protobuf:"bytes,3,opt,name=primaryKey,proto3" json:"primaryKey,omitempty"`
	// 单页返回多少条记录，默认返回10条,为了系统安全最多单次只能返回20条
	Count int32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// 0降序，1升序，默认降序
	Direction int32 `protobuf:"varint,5,opt,name=direction,proto3" json:"direction,omitempty"`
}

func (x *SpotTradeQueryHistoryOrderList) Reset() {
	*x = SpotTradeQueryHistoryOrderList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkexchange_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotTradeQueryHistoryOrderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotTradeQueryHistoryOrderList) ProtoMessage() {}

func (x *SpotTradeQueryHistoryOrderList) ProtoReflect() protoreflect.Message {
	mi := &file_zkexchange_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotTradeQueryHistoryOrderList.ProtoReflect.Descriptor instead.
func (*SpotTradeQueryHistoryOrderList) Descriptor() ([]byte, []int) {
	return file_zkexchange_proto_rawDescGZIP(), []int{6}
}

func (x *SpotTradeQueryHistoryOrderList) GetLeftAssetTokenID() uint32 {
	if x != nil {
		return x.LeftAssetTokenID
	}
	return 0
}

func (x *SpotTradeQueryHistoryOrderList) GetRightAssetTokenID() uint32 {
	if x != nil {
		return x.RightAssetTokenID
	}
	return 0
}

func (x *SpotTradeQueryHistoryOrderList) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

func (x *SpotTradeQueryHistoryOrderList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SpotTradeQueryHistoryOrderList) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

// 根据orderID去查询订单信息
type SpotTradeQueryOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderID int64 `protobuf:"varint,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
}

func (x *SpotTradeQueryOrder) Reset() {
	*x = SpotTradeQueryOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkexchange_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotTradeQueryOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotTradeQueryOrder) ProtoMessage() {}

func (x *SpotTradeQueryOrder) ProtoReflect() protoreflect.Message {
	mi := &file_zkexchange_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotTradeQueryOrder.ProtoReflect.Descriptor instead.
func (*SpotTradeQueryOrder) Descriptor() ([]byte, []int) {
	return file_zkexchange_proto_rawDescGZIP(), []int{7}
}

func (x *SpotTradeQueryOrder) GetOrderID() int64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

// 根据地址，状态查询用户自己的挂单信息
type SpotTradeQueryOrderList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 挂单状态必填(默认是0,只查询ordered挂单中的)
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// 用户地址信息，必填
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// 主键索引
	PrimaryKey string `protobuf:"bytes,3,opt,name=primaryKey,proto3" json:"primaryKey,omitempty"`
	// 单页返回多少条记录，默认返回10条,为了系统安全最多单次只能返回20条
	Count int32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// 0降序，1升序，默认降序
	Direction int32 `protobuf:"varint,5,opt,name=direction,proto3" json:"direction,omitempty"`
}

func (x *SpotTradeQueryOrderList) Reset() {
	*x = SpotTradeQueryOrderList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkexchange_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotTradeQueryOrderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotTradeQueryOrderList) ProtoMessage() {}

func (x *SpotTradeQueryOrderList) ProtoReflect() protoreflect.Message {
	mi := &file_zkexchange_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotTradeQueryOrderList.ProtoReflect.Descriptor instead.
func (*SpotTradeQueryOrderList) Descriptor() ([]byte, []int) {
	return file_zkexchange_proto_rawDescGZIP(), []int{8}
}

func (x *SpotTradeQueryOrderList) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SpotTradeQueryOrderList) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SpotTradeQueryOrderList) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

func (x *SpotTradeQueryOrderList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SpotTradeQueryOrderList) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

// 订单列表
type SpotTradeOrderList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*SpotTradeOrder `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	PrimaryKey string            `protobuf:"bytes,2,opt,name=primaryKey,proto3" json:"primaryKey,omitempty"`
}

func (x *SpotTradeOrderList) Reset() {
	*x = SpotTradeOrderList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkexchange_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotTradeOrderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotTradeOrderList) ProtoMessage() {}

func (x *SpotTradeOrderList) ProtoReflect() protoreflect.Message {
	mi := &file_zkexchange_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotTradeOrderList.ProtoReflect.Descriptor instead.
func (*SpotTradeOrderList) Descriptor() ([]byte, []int) {
	return file_zkexchange_proto_rawDescGZIP(), []int{9}
}

func (x *SpotTradeOrderList) GetList() []*SpotTradeOrder {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *SpotTradeOrderList) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

// exchange执行票据日志
type SpotTradeReceiptExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order       *SpotTradeOrder   `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	MatchOrders []*SpotTradeOrder `protobuf:"bytes,2,rep,name=matchOrders,proto3" json:"matchOrders,omitempty"`
	Index       int64             `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *SpotTradeReceiptExchange) Reset() {
	*x = SpotTradeReceiptExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkexchange_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotTradeReceiptExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotTradeReceiptExchange) ProtoMessage() {}

func (x *SpotTradeReceiptExchange) ProtoReflect() protoreflect.Message {
	mi := &file_zkexchange_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotTradeReceiptExchange.ProtoReflect.Descriptor instead.
func (*SpotTradeReceiptExchange) Descriptor() ([]byte, []int) {
	return file_zkexchange_proto_rawDescGZIP(), []int{10}
}

func (x *SpotTradeReceiptExchange) GetOrder() *SpotTradeOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *SpotTradeReceiptExchange) GetMatchOrders() []*SpotTradeOrder {
	if x != nil {
		return x.MatchOrders
	}
	return nil
}

func (x *SpotTradeReceiptExchange) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

var File_zkexchange_proto protoreflect.FileDescriptor

var file_zkexchange_proto_rawDesc = []byte{
	0x0a, 0x10, 0x7a, 0x6b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x0d, 0x53, 0x70,
	0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x6c,
	0x65, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x6f, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xca, 0x03, 0x0a, 0x0e, 0x53, 0x70,
	0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x70, 0x6f, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x41, 0x56, 0x47, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x41, 0x56, 0x47, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x14, 0x53, 0x70, 0x6f, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12,
	0x2a, 0x0a, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x22, 0xae, 0x01, 0x0a, 0x14, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x2a,
	0x0a, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x6f, 0x70, 0x22, 0x6b, 0x0a, 0x18, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x4b, 0x65, 0x79, 0x22, 0x7b, 0x0a, 0x17, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x2f,
	0x0a, 0x04, 0x62, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x04, 0x62, 0x69, 0x64, 0x73, 0x12,
	0x2f, 0x0a, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x04, 0x61, 0x73, 0x6b, 0x73,
	0x22, 0xce, 0x01, 0x0a, 0x1e, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c,
	0x65, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12,
	0x2c, 0x0a, 0x11, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x2f, 0x0a, 0x13, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x9f, 0x01, 0x0a, 0x17, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x12, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x96, 0x01, 0x0a, 0x18, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0a,
	0x5a, 0x08, 0x2e, 0x2e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_zkexchange_proto_rawDescOnce sync.Once
	file_zkexchange_proto_rawDescData = file_zkexchange_proto_rawDesc
)

func file_zkexchange_proto_rawDescGZIP() []byte {
	file_zkexchange_proto_rawDescOnce.Do(func() {
		file_zkexchange_proto_rawDescData = protoimpl.X.CompressGZIP(file_zkexchange_proto_rawDescData)
	})
	return file_zkexchange_proto_rawDescData
}

var file_zkexchange_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_zkexchange_proto_goTypes = []interface{}{
	(*SpotTradeInfo)(nil),                  // 0: types.SpotTradeInfo
	(*SpotTradeOrder)(nil),                 // 1: types.SpotTradeOrder
	(*SpotQueryMarketDepth)(nil),           // 2: types.SpotQueryMarketDepth
	(*SpotTradeMarketDepth)(nil),           // 3: types.SpotTradeMarketDepth
	(*SpotTradeMarketDepthList)(nil),       // 4: types.SpotTradeMarketDepthList
	(*SpotTradeMarketAllDepth)(nil),        // 5: types.SpotTradeMarketAllDepth
	(*SpotTradeQueryHistoryOrderList)(nil), // 6: types.SpotTradeQueryHistoryOrderList
	(*SpotTradeQueryOrder)(nil),            // 7: types.SpotTradeQueryOrder
	(*SpotTradeQueryOrderList)(nil),        // 8: types.SpotTradeQueryOrderList
	(*SpotTradeOrderList)(nil),             // 9: types.SpotTradeOrderList
	(*SpotTradeReceiptExchange)(nil),       // 10: types.SpotTradeReceiptExchange
}
var file_zkexchange_proto_depIdxs = []int32{
	0, // 0: types.SpotTradeOrder.spotTradeInfo:type_name -> types.SpotTradeInfo
	3, // 1: types.SpotTradeMarketDepthList.list:type_name -> types.SpotTradeMarketDepth
	3, // 2: types.SpotTradeMarketAllDepth.bids:type_name -> types.SpotTradeMarketDepth
	3, // 3: types.SpotTradeMarketAllDepth.asks:type_name -> types.SpotTradeMarketDepth
	1, // 4: types.SpotTradeOrderList.list:type_name -> types.SpotTradeOrder
	1, // 5: types.SpotTradeReceiptExchange.order:type_name -> types.SpotTradeOrder
	1, // 6: types.SpotTradeReceiptExchange.matchOrders:type_name -> types.SpotTradeOrder
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_zkexchange_proto_init() }
func file_zkexchange_proto_init() {
	if File_zkexchange_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zkexchange_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotTradeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkexchange_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotTradeOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkexchange_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotQueryMarketDepth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkexchange_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotTradeMarketDepth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkexchange_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotTradeMarketDepthList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkexchange_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotTradeMarketAllDepth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkexchange_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotTradeQueryHistoryOrderList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkexchange_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotTradeQueryOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkexchange_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotTradeQueryOrderList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkexchange_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotTradeOrderList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkexchange_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotTradeReceiptExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zkexchange_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SpotTradeOrder_SpotTradeInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zkexchange_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zkexchange_proto_goTypes,
		DependencyIndexes: file_zkexchange_proto_depIdxs,
		MessageInfos:      file_zkexchange_proto_msgTypes,
	}.Build()
	File_zkexchange_proto = out.File
	file_zkexchange_proto_rawDesc = nil
	file_zkexchange_proto_goTypes = nil
	file_zkexchange_proto_depIdxs = nil
}
